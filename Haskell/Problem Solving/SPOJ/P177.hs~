-- ABWORDS

import Data.List
import Debug.Trace

isNice w = go 0 0 w
  where
    go aN bN []       = aN == bN
    go aN bN ('a':xs) = go (aN + 1) bN xs
    go aN bN ('b':xs) | aN == bN  = False 
                      | otherwise = go aN (bN + 1) xs

sub = tail . init

splits w = go [] 0 w
  where
    go _ _ []       = []
    go l i xs@(h:t) = (i, reverse l, xs)
                    : go (h : l) (i + 1) t

sim [] [] = True
sim w1@(_:_:_) w2@(_:_:_) = trace (w1++","++w2) $ isNice w1' && isNice w2' && sim w1' w2'
                         || any p (splits (tail w1))
  where
    w1' = sub w1
    w2' = sub w2
    p (i, w1L, w1R) = isNice w1L   && isNice w1R 
                   && isNice w2L   && isNice w2R
                   && sim w1L w2L  && sim w1R w2R                   
                   || isNice w2L'  && isNice w2R'
                   && sim w1L w2R' && sim w1R w2L'
      where
        (w2L,  w2R)  = splitAt i w2
        (w2L', w2R') = splitAt (length w2 - i) w2

sim _ _ = False

a = "aabaabbbab"
b = "abababaabb"
c = "abaaabbabb"